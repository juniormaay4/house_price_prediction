# .github/workflows/ci_cd.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Exécute le job sur une machine virtuelle Ubuntu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Récupère le code du dépôt

    # --- Setup Python Backend ---
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Installe les dépendances générales du projet
        # Assurez-vous que requirements.txt contient toutes les dépendances de src/ et api/

    - name: Create dummy data for tests (if needed for CI)
      # Ce script est un exemple. Dans un vrai test, vous utiliseriez des fixtures de pytest
      # pour générer des données temporaires ou utiliser des jeux de données de test dédiés.
      # Pour l'instant, on assure juste que les fichiers train/test existent pour le CI.
      run: |
        mkdir -p data/processed
        # Crée des données factices minimales pour que les tests de data_preparation/features_engineering ne échouent pas sur FileNotFoundError
        # C'est une solution temporaire pour CI; les vrais tests devraient gérer la création de fixtures.
        echo "date,price,bedrooms,bathrooms,sqft_living,sqft_lot,floors,waterfront,view,condition,sqft_above,sqft_basement,yr_built,yr_renovated,street,city,statezip,country" > data/processed/train.csv
        echo "2010-01-01,300000.0,3.0,1.5,1500,5000,1.0,0,0,3,1200,300,1990,0,Main St,Seattle,WA 98101,USA" >> data/processed/train.csv
        echo "2015-05-10,450000.0,4.0,2.5,2200,7000,2.0,1,2,4,1800,400,2005,2010,Oak Ave,Bellevue,WA 98004,USA" >> data/processed/train.csv
        echo "2020-11-20,600000.0,3.0,2.0,1800,6000,1.0,0,1,3,1500,300,1998,0,Pine Ln,Redmond,WA 98052,USA" >> data/processed/train.csv
        cp data/processed/train.csv data/processed/test.csv

    - name: Install API specific requirements (if different from global)
      # Parfois, api/requirements.txt pourrait avoir des dépendances spécifiques non dans le global
      # run: pip install -r api/requirements.txt
      continue-on-error: true # Permet au workflow de continuer même si ce fichier n'existe pas

    - name: Run Python tests
      # Assurez-vous d'avoir des tests dans le dossier 'tests/' et pytest installé
      run: |
        pip install pytest
        pytest # Exécute tous les tests pytest dans le projet

    - name: Build and Lint API Docker Image
      run: |
        docker build -t house-price-api -f api/Dockerfile .

    # --- Setup Node.js Frontend ---
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Ou la version de Node.js que votre frontend utilise

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install # Ou yarn install

    - name: Build frontend
      run: |
        cd frontend
        npm run build # Ou yarn build
      env:
        CI: true # Nécessaire pour éviter les warnings de Create React App comme des erreurs en CI

    # --- Placeholder for Deployment (CD) ---
    # Ceci est juste un exemple. Le déploiement réel dépendrait de votre plateforme (AWS, GCP, Heroku, etc.)
    # et de l'environnement (staging, production).
    - name: Deploy to staging (example)
      if: github.ref == 'refs/heads/develop' # Déclenche seulement sur la branche 'develop'
      run: echo "Déploiement sur l'environnement de staging..."
      # Exemple:
      # - run: docker push your_docker_registry/house-price-api:latest
      # - uses: your-cloud-provider-action/deploy@v1

    - name: Deploy to production (example)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Déclenche sur push vers 'main'
      run: echo "Déploiement en production..."
      # Exemple:
      # - run: docker push your_docker_registry/house-price-api:latest
      # - uses: your-cloud-provider-action/deploy@v1